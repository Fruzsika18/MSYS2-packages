From 62732ee2441f458dfe98dc57bf54a81d06648d79 Mon Sep 17 00:00:00 2001
From: Takashi Yano <takashi.yano@nifty.ne.jp>
Date: Thu, 24 Feb 2022 17:28:32 +0900
Subject: [PATCH 019/N] Cygwin: console: Restore CTRL_BREAK_EVENT handling.

- The recent change by the commit "Cygwin: console: Redesign handling
  of special keys." breaks the handling of CTRL_BREAK_EVENT. The login
  shell in console exits on Ctrl-Break key. This patch fixes the issue.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 winsup/cygwin/exceptions.cc       | 13 ++++++-------
 winsup/cygwin/fhandler_console.cc | 11 +++--------
 winsup/cygwin/sigproc.cc          |  3 +--
 3 files changed, 10 insertions(+), 17 deletions(-)

diff --git a/winsup/cygwin/exceptions.cc b/winsup/cygwin/exceptions.cc
index 356d69d..73bf689 100644
--- a/winsup/cygwin/exceptions.cc
+++ b/winsup/cygwin/exceptions.cc
@@ -1146,6 +1146,11 @@ ctrl_c_handler (DWORD type)
   if (!pinfo (cygwin_pid (GetCurrentProcessId ())))
     return TRUE;
 
+  if (type == CTRL_C_EVENT && ::cygheap->ctty
+      && !cygheap->ctty->need_console_handler ())
+    /* Ctrl-C is handled in fhandler_console::cons_master_thread(). */
+    return TRUE;
+
   tty_min *t = cygwin_shared->tty.get_cttyp ();
 
   /* If process group leader is non-cygwin process or not exist,
@@ -1169,14 +1174,8 @@ ctrl_c_handler (DWORD type)
        (to indicate that we have handled the signal).  At this point, type
        should be a CTRL_C_EVENT or CTRL_BREAK_EVENT. */
     {
-      int sig = SIGINT;
-      /* If intr and quit are both mapped to ^C, send SIGQUIT on ^BREAK */
-      if (type == CTRL_BREAK_EVENT
-	  && t->ti.c_cc[VINTR] == 3 && t->ti.c_cc[VQUIT] == 3)
-	sig = SIGQUIT;
       t->last_ctrl_c = GetTickCount64 ();
-      t->kill_pgrp (sig);
-      t->output_stopped = false;
+      fhandler_termios::process_sigs ('\003', (tty *) t, ::cygheap->ctty);
       t->last_ctrl_c = GetTickCount64 ();
       return TRUE;
     }
diff --git a/winsup/cygwin/fhandler_console.cc b/winsup/cygwin/fhandler_console.cc
index e1e0bfb..f285542 100644
--- a/winsup/cygwin/fhandler_console.cc
+++ b/winsup/cygwin/fhandler_console.cc
@@ -697,11 +697,7 @@ fhandler_console::bg_check (int sig, bool dontsignal)
   if (sig == SIGTTIN)
     {
       set_input_mode (tty::cygwin, &tc ()->ti, get_handle_set ());
-      if (con.disable_master_thread)
-	{
-	  con.disable_master_thread = false;
-	  init_console_handler (false);
-	}
+      con.disable_master_thread = false;
     }
   if (sig == SIGTTOU)
     set_output_mode (tty::cygwin, &tc ()->ti, get_handle_set ());
@@ -1404,7 +1400,8 @@ bool
 fhandler_console::open_setup (int flags)
 {
   set_flags ((flags & ~O_TEXT) | O_BINARY);
-  myself->set_ctty (this, flags);
+  if (myself->set_ctty (this, flags) && !myself->cygstarted)
+    init_console_handler (true);
   return fhandler_base::open_setup (flags);
 }
 
@@ -1420,8 +1417,6 @@ fhandler_console::post_open_setup (int fd)
   else if (fd == 1 || fd == 2)
     set_output_mode (tty::cygwin, &get_ttyp ()->ti, &handle_set);
 
-  init_console_handler (need_console_handler ());
-
   fhandler_base::post_open_setup (fd);
 }
 
diff --git a/winsup/cygwin/sigproc.cc b/winsup/cygwin/sigproc.cc
index 26dba90..02d875a 100644
--- a/winsup/cygwin/sigproc.cc
+++ b/winsup/cygwin/sigproc.cc
@@ -1412,8 +1412,7 @@ wait_sig (VOID *)
 	  sig_held = true;
 	  break;
 	case __SIGSETPGRP:
-	  if (::cygheap->ctty)
-	    init_console_handler (::cygheap->ctty->need_console_handler ());
+	  init_console_handler (true);
 	  break;
 	case __SIGTHREADEXIT:
 	  {
-- 
2.9.0

