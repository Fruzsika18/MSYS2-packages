From 1d0701d84e198b22f752bceda2fb73666029761f Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Fri, 14 Jan 2022 14:50:43 +0100
Subject: [PATCH 64/N] Stop enabling virtual terminal input with
 MSYS=disable_pcon

When the support for pseudo consoles is disabled, it really is not our
business to mess with the Console in the way we do.

If this was just an academic problem, I would ignore it. But it is not:
whenever we spawn a non-MSYS process with redirected `stdin`, we mess
around with the Console mode like there was no tomorrow. For example,
when Git spawns the Git Credential Manager (which it does with stdin
redirected from /dev/null), the MSYS2 runtime nilly-willy leaves the
Console mode with ENABLE_ECHO_INPUT, ENABLE_LINE_INPUT and
ENABLE_PROCESSED_INPUT turned _off_. This totally breaks the operation
when trying to query the user for credentials.

This can be easily reproduced by running this small C program via the
Bash in a regular Windows Command Prompt ("cmd"):

-- snip --

int main(int argc, char **argv)
{
	HANDLE handle = CreateFile("CONIN$",
				   GENERIC_READ | GENERIC_WRITE,
				   FILE_SHARE_READ | FILE_SHARE_WRITE,
				   NULL,
				   OPEN_EXISTING,
				   FILE_ATTRIBUTE_NORMAL,
				   NULL);
	DWORD mode;
	BOOL result = GetConsoleMode(handle, &mode);

	if (!result)
		fprintf(stderr, "Could not get console mode\n");
	else {
		fprintf(stderr, "Got mode 0x%x\n", mode);
		if (argc > 1) {
			result = SetConsoleMode(handle,
						mode ^ ENABLE_ECHO_INPUT);
			fprintf(stderr,
				"result setting mode: %d\n", result);
		}
	}

	CloseHandle(handle);

	return result ? 0 : 1;
}
-- snap --

When running it in disable_pcon mode without stdin redirected, this will
print out `0x7`. When run with stdin redirected from /dev/null, it
_should_ print out the same, but it prints out `0x208` instead.

This patch is a hack. There is no way I can sugarcoat it. Yet the
code revolving around pseudo console support (and unfortunately also the
disabled_pcon code which is intricately entangled instead of cleanly
separated from the pseudo console code) is so convoluted that it was
hard to even so much as find this work-around. The code flow is so
obscure and riddled with twists and turns that I cannot justify working
on this any more than I already did.

Note: one might think that we could change the patch easily to simply
return from the function instead of reverting to `tty::restore`, and
that this would work around the issue, too. One would be sorely
mistaken! The Console mode is messed with elsewhere, too, for example in
`fhandler_console::open()` when trying to determine whether we're in
legacy mode or not. So yes. It's a mess.

This addresses
https://github.com/GitCredentialManager/git-credential-manager/issues/576

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 winsup/cygwin/fhandler_console.cc | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/winsup/cygwin/fhandler_console.cc b/winsup/cygwin/fhandler_console.cc
index 68567f9..88b200a 100644
--- a/winsup/cygwin/fhandler_console.cc
+++ b/winsup/cygwin/fhandler_console.cc
@@ -476,6 +476,11 @@ fhandler_console::set_input_mode (tty::cons_mode m, const termios *t,
   DWORD flags = 0, oflags;
   WaitForSingleObject (p->input_mutex, INFINITE);
   GetConsoleMode (p->input_handle, &oflags);
+  if (disable_pcon && m == tty::cygwin)
+    /* If we disabled pseudo console support explicitly, it would be wrong to
+       mess with the flags. In fact, we _still_ mess with the flags, but at
+       least with tty::restore we do little damage. */
+    m = tty::restore;
   switch (m)
     {
     case tty::restore:
-- 
2.9.0

