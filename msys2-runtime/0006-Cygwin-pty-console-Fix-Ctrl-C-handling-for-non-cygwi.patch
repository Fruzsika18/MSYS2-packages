From 2bf59204c5d2dae7d7ebe3b0efa427f6bd15a6cf Mon Sep 17 00:00:00 2001
From: Takashi Yano <takashi.yano@nifty.ne.jp>
Date: Thu, 10 Feb 2022 16:53:47 +0900
Subject: [PATCH 006/N] Cygwin: pty, console: Fix Ctrl-C handling for
 non-cygwin apps.

- Currently, if cat is started from cmd.exe which is started in cygwin
  console, Ctrl-C terminates not only cat but also cmd.exe. This also
  happens in pty in which pseudo console is disabled. This patch fixes
  the issue.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 winsup/cygwin/fhandler_console.cc | 28 +++++++++++++++++++++++
 winsup/cygwin/fhandler_termios.cc | 38 +++++++++++++++++++++++++++++++
 2 files changed, 66 insertions(+)

diff --git a/winsup/cygwin/fhandler_console.cc b/winsup/cygwin/fhandler_console.cc
index 17452cd..9b94f3c 100644
--- a/winsup/cygwin/fhandler_console.cc
+++ b/winsup/cygwin/fhandler_console.cc
@@ -238,6 +238,33 @@ fhandler_console::cons_master_thread (handle_set_t *p, tty *ttyp)
 	  char c = (char) wc;
 	  bool processed = false;
 	  termios &ti = ttyp->ti;
+	  pinfo pi (ttyp->getpgid ());
+	  if (pi && pi->ctty == ttyp->ntty
+	      && (pi->process_state & PID_NOTCYGWIN)
+	      && input_rec[i].EventType == KEY_EVENT && c == '\003')
+	    {
+	      bool not_a_sig = false;
+	      if (!CCEQ (ti.c_cc[VINTR], c)
+		  && !CCEQ (ti.c_cc[VQUIT], c)
+		  && !CCEQ (ti.c_cc[VSUSP], c))
+		not_a_sig = true;
+	      if (input_rec[i].Event.KeyEvent.bKeyDown)
+		{
+		  /* CTRL_C_EVENT does not work for the process started with
+		     CREATE_NEW_PROCESS_GROUP flag, so send CTRL_BREAK_EVENT
+		     instead. */
+		  if (pi->process_state & PID_NEW_PG)
+		    GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT,
+					      pi->dwProcessId);
+		  else
+		    GenerateConsoleCtrlEvent (CTRL_C_EVENT, 0);
+		  if (not_a_sig)
+		    goto skip_writeback;
+		}
+	      processed = true;
+	      if (not_a_sig)
+		goto remove_record;
+	    }
 	  switch (input_rec[i].EventType)
 	    {
 	    case KEY_EVENT:
@@ -310,6 +337,7 @@ fhandler_console::cons_master_thread (handle_set_t *p, tty *ttyp)
 	      processed = true;
 	      break;
 	    }
+remove_record:
 	  if (processed)
 	    { /* Remove corresponding record. */
 	      memmove (input_rec + i, input_rec + i + 1,
diff --git a/winsup/cygwin/fhandler_termios.cc b/winsup/cygwin/fhandler_termios.cc
index 3461d17..fe10215 100644
--- a/winsup/cygwin/fhandler_termios.cc
+++ b/winsup/cygwin/fhandler_termios.cc
@@ -147,6 +147,8 @@ tty_min::kill_pgrp (int sig)
       _pinfo *p = pids[i];
       if (!p || !p->exists () || p->ctty != ntty || p->pgid != pgid)
 	continue;
+      if (p->process_state & PID_NOTCYGWIN)
+	continue;
       if (p == myself)
 	killself = sig != __SIGSETPGRP && !exit_state;
       else
@@ -326,6 +328,42 @@ fhandler_termios::line_edit (const char *rptr, size_t nread, termios& ti,
 
       if (ti.c_iflag & ISTRIP)
 	c &= 0x7f;
+      winpids pids ((DWORD) 0);
+      if (get_ttyp ()->pcon_input_state_eq (tty::to_nat))
+	{
+	  bool need_discard_input = false;
+	  for (unsigned i = 0; i < pids.npids; i++)
+	    {
+	      _pinfo *p = pids[i];
+	      if (c == '\003' && p && p->ctty == tc ()->ntty
+		  && p->pgid == tc ()->getpgid ()
+		  && (p->process_state & PID_NOTCYGWIN))
+		{
+		  /* CTRL_C_EVENT does not work for the process started with
+		     CREATE_NEW_PROCESS_GROUP flag, so send CTRL_BREAK_EVENT
+		     instead. */
+		  if (p->process_state & PID_NEW_PG)
+		    GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT,
+					      p->dwProcessId);
+		  else
+		    GenerateConsoleCtrlEvent (CTRL_C_EVENT, 0);
+		  need_discard_input = true;
+		}
+	    }
+	  if (need_discard_input
+	      && !CCEQ (ti.c_cc[VINTR], c)
+	      && !CCEQ (ti.c_cc[VQUIT], c)
+	      && !CCEQ (ti.c_cc[VSUSP], c))
+	    {
+	      if (!(ti.c_lflag & NOFLSH))
+		{
+		  eat_readahead (-1);
+		  discard_input ();
+		}
+	      ti.c_lflag &= ~FLUSHO;
+	      continue;
+	    }
+	}
       if (ti.c_lflag & ISIG)
 	{
 	  int sig;
-- 
2.9.0

