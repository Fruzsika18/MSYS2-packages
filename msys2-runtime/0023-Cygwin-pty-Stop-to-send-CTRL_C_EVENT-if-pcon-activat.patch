From 8c86cc11538799da55d9951f481f767939678f4a Mon Sep 17 00:00:00 2001
From: Takashi Yano <takashi.yano@nifty.ne.jp>
Date: Sat, 26 Feb 2022 04:19:03 +0900
Subject: [PATCH 023/N] Cygwin: pty: Stop to send CTRL_C_EVENT if pcon
 activated.

- The commit "Cygwin: console: Redesign handling of special keys."
  removes special treatment for pty in with pseudo console activated,
  however, it is necessary on second thought. This is because sending
  CTRL_C_EVENT to non-cygwin apps will be done in pseudo console,
  therefore, sending it in fhandler_pty_master::write() duplicates
  that event for non-cygwin apps.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 winsup/cygwin/fhandler.h          |  2 ++
 winsup/cygwin/fhandler_termios.cc | 11 ++++-------
 winsup/cygwin/fhandler_tty.cc     | 11 +++++++++++
 3 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/winsup/cygwin/fhandler.h b/winsup/cygwin/fhandler.h
index 3acb598..eedf2b7 100644
--- a/winsup/cygwin/fhandler.h
+++ b/winsup/cygwin/fhandler.h
@@ -1957,6 +1957,7 @@ class fhandler_termios: public fhandler_base
   static bool path_iscygexec_w (LPCWSTR n, LPWSTR c);
   virtual void cleanup_before_exit () {}
   virtual bool need_console_handler () { return false; }
+  virtual bool need_send_ctrl_c_event () { return true; }
 };
 
 enum ansi_intensity
@@ -2491,6 +2492,7 @@ public:
   void get_master_thread_param (master_thread_param_t *p);
   void get_master_fwd_thread_param (master_fwd_thread_param_t *p);
   void set_mask_flusho (bool m) { get_ttyp ()->mask_flusho = m; }
+  bool need_send_ctrl_c_event ();
 };
 
 class fhandler_dev_null: public fhandler_base
diff --git a/winsup/cygwin/fhandler_termios.cc b/winsup/cygwin/fhandler_termios.cc
index b236c1b..5685233 100644
--- a/winsup/cygwin/fhandler_termios.cc
+++ b/winsup/cygwin/fhandler_termios.cc
@@ -359,16 +359,12 @@ fhandler_termios::process_sigs (char c, tty* ttyp, fhandler_termios *fh)
 	     instead. */
 	  if ((p->process_state & PID_NEW_PG)
 	      && (p->process_state & PID_NOTCYGWIN))
-	    {
-	      GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT,
-					p->dwProcessId);
-	      need_discard_input = true;
-	    }
-	  else if (!ctrl_c_event_sent)
+	    GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT, p->dwProcessId);
+	  else if ((!fh || fh->need_send_ctrl_c_event () || cyg_leader)
+			  && !ctrl_c_event_sent)
 	    {
 	      GenerateConsoleCtrlEvent (CTRL_C_EVENT, 0);
 	      ctrl_c_event_sent = true;
-	      need_discard_input = true;
 	    }
 	  if (resume_pid && fh && !fh->is_console ())
 	    {
@@ -377,6 +373,7 @@ fhandler_termios::process_sigs (char c, tty* ttyp, fhandler_termios *fh)
 	      if (::cygheap->ctty && ::cygheap->ctty->is_console ())
 		init_console_handler (true);
 	    }
+	  need_discard_input = true;
 	}
       if (p && p->ctty == ttyp->ntty && p->pgid == pgid)
 	{
diff --git a/winsup/cygwin/fhandler_tty.cc b/winsup/cygwin/fhandler_tty.cc
index 979232d..f82d1e9 100644
--- a/winsup/cygwin/fhandler_tty.cc
+++ b/winsup/cygwin/fhandler_tty.cc
@@ -4054,3 +4054,14 @@ fhandler_pty_slave::cleanup_for_non_cygwin_app (handle_set_t *p, tty *ttyp,
   close_pseudoconsole (ttyp);
   ReleaseMutex (p->pcon_mutex);
 }
+
+bool
+fhandler_pty_master::need_send_ctrl_c_event ()
+{
+  /* If pseudo console is activated, sending CTRL_C_EVENT to non-cygwin
+     apps will be done in pseudo console, therefore, sending it in
+     fhandler_pty_master::write() duplicates that event for non-cygwin
+     apps. So return false if pseudo console is activated. */
+  return !(to_be_read_from_pcon () && get_ttyp ()->pcon_activated
+    && get_ttyp ()->pcon_input_state == tty::to_nat);
+}
-- 
2.9.0

